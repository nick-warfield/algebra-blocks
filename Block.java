package algebrablocks;

import javax.swing.JPanel;
import org.apache.commons.math3.fraction.Fraction;
// source: http://commons.apache.org/proper/commons-math/download_math.cgi
// docs : http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/index.html

public class Block extends JPanel
{
    private boolean isLHS;
	private Fraction num;
	private String coeff;

    private int initialX, initialY;
   
	public Block()
	{
		initComponents();
		isLHS = true;
		num = new Fraction(1);
		coeff = "";
	}
    public Block(boolean IsLeftHandSide, Fraction Number) throws IllegalArgumentException
	{
		if (Number == null) { throw new IllegalArgumentException(); }
        initComponents();
		isLHS = IsLeftHandSide;
		num = Number;
		coeff = "";
    }
    public Block(boolean IsLeftHandSide, Fraction Number, String Coefficient) throws IllegalArgumentException
	{
		if (Coefficient == null || Number == null) { throw new IllegalArgumentException(); }
        initComponents();
		isLHS = IsLeftHandSide;
		num = Number;
		coeff = Coefficient;
    }
	public Block(Block blk)
	{
		initComponents();
		isLHS = blk.isLHS();
		num = blk.Number();
		coeff = blk.Coefficient();
	}

    //Methods...
    public void ChangeSide() { isLHS = !isLHS; }
    public boolean isLHS() { return isLHS; }

	public Fraction getNumber() { return num; }
	public String getCoefficient() { return coeff; }
    
	public void setNumber(Fraction Number) throws IllegalArgumentException
	{
		if (Number == null) { throw new IllegalArgumentException(); }
		num = Number;
	}
	public void setCoefficient(String Coefficient) throws IllegalArgumentException
	{
		if (Number == null) { throw new IllegalArgumentException(); }
		coeff = Coefficient;
	}

	public int getInitialX() { return initialX; }
    public int getInitialY() { return initialY; }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


	public Block add(Block other)
	{
		if (other == null) { throw new IllegalArgumentException(); }
		if (isLHS() != other.isLHS())
		{
			throw new IllegalArgumentException(
					"Can only add blocks on the same side");
		}
		if (getCoefficient() != other.getCoefficient())
		{
			throw new ArithmeticException("Cannot combine unlike terms");
		}

		Block blk = new Block(this);
		blk.setNumber(blk.getNumber().add(other.getNumber()));
		return blk;
	}
	public void multiply(Block other)
	{
		if (other == null) { throw new IllegalArgumentException(); }
		if (isLHS() != other.isLHS())
		{
			throw new IllegalArgumentException(
					"Can only multiply blocks on the same side");
		}
		Block blk = new Block(this);
		blk.setNumber(blk.getNumber().multiply(other.getNumber()));
		blk.setCoefficient(blk.getCoefficient() + other.getCoefficient());
		return blk;
	}

	public String toString()
	{
		return num.toString() + coeff;
	}
}
